// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview Provides priority recommendations for tasks based on urgency and impact.
 *
 * - getPriorityRecommendations - A function that takes a list of tasks and returns priority recommendations.
 * - PriorityRecommendationsInput - The input type for the getPriorityRecommendations function.
 * - PriorityRecommendationsOutput - The return type for the getPriorityRecommendations function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const PriorityRecommendationsInputSchema = z.object({
  tasks: z.array(
    z.object({
      id: z.string().describe('Unique identifier for the task.'),
      title: z.string().describe('Title of the task.'),
      description: z.string().describe('Detailed description of the task.'),
      dueDate: z.string().optional().describe('The due date of the task (ISO format).'),
      impact: z.string().describe('The impact of the task (e.g., High, Medium, Low).'),
      urgency: z.string().describe('The urgency of the task (e.g., High, Medium, Low).'),
    })
  ).describe('A list of tasks to prioritize.'),
});
export type PriorityRecommendationsInput = z.infer<typeof PriorityRecommendationsInputSchema>;

const PriorityRecommendationsOutputSchema = z.object({
  recommendations: z.array(
    z.object({
      taskId: z.string().describe('The ID of the task.'),
      priority: z.number().describe('The recommended priority of the task (1 being highest).'),
      reason: z.string().describe('The reason for the recommended priority.'),
    })
  ).describe('A list of priority recommendations for each task.'),
});
export type PriorityRecommendationsOutput = z.infer<typeof PriorityRecommendationsOutputSchema>;

export async function getPriorityRecommendations(input: PriorityRecommendationsInput): Promise<PriorityRecommendationsOutput> {
  return priorityRecommendationsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'priorityRecommendationsPrompt',
  input: {schema: PriorityRecommendationsInputSchema},
  output: {schema: PriorityRecommendationsOutputSchema},
  prompt: `You are an AI assistant designed to provide priority recommendations for a list of tasks. Analyze the tasks based on their description, due date, impact, and urgency.

  Provide a priority (1 being highest) and a brief explanation for each task.

  Tasks:
  {{#each tasks}}
  ID: {{id}}
  Title: {{title}}
  Description: {{description}}
  Due Date: {{dueDate}}
  Impact: {{impact}}
  Urgency: {{urgency}}
  ---
  {{/each}}`,
});

const priorityRecommendationsFlow = ai.defineFlow(
  {
    name: 'priorityRecommendationsFlow',
    inputSchema: PriorityRecommendationsInputSchema,
    outputSchema: PriorityRecommendationsOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
