// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview Summarizes tasks using AI to manage large projects more easily.
 *
 * - summarizeTask - A function that summarizes a given task.
 * - TaskSummarizationInput - The input type for the summarizeTask function.
 * - TaskSummarizationOutput - The return type for the summarizeTask function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const TaskSummarizationInputSchema = z.object({
  taskText: z.string().describe('The text content of the task to be summarized.'),
});
export type TaskSummarizationInput = z.infer<typeof TaskSummarizationInputSchema>;

const TaskSummarizationOutputSchema = z.object({
  summary: z.string().describe('A concise summary of the task, ideally around 50 words. If no summary can be made, this will indicate so.'),
});
export type TaskSummarizationOutput = z.infer<typeof TaskSummarizationOutputSchema>;

export async function summarizeTask(input: TaskSummarizationInput): Promise<TaskSummarizationOutput> {
  return summarizeTaskFlow(input);
}

const taskSummarizationPrompt = ai.definePrompt({
  name: 'taskSummarizationPrompt',
  input: {schema: TaskSummarizationInputSchema},
  output: {schema: TaskSummarizationOutputSchema},
  prompt: `You are an AI assistant. Your task is to summarize the given task text in 50 words or less.
You MUST respond in JSON format. The JSON object must have a single key "summary", and its value should be the summary string.

Example of a valid response:
{"summary": "This is an example summary of the task."}

If the task text is too short, unclear, or insufficient to create a meaningful summary, provide a JSON response like this:
{"summary": "No summary available due to insufficient content."}

Task text to summarize:
{{taskText}}

Remember to always provide your response in the specified JSON format.`,
});

const summarizeTaskFlow = ai.defineFlow(
  {
    name: 'summarizeTaskFlow',
    inputSchema: TaskSummarizationInputSchema,
    outputSchema: TaskSummarizationOutputSchema,
  },
  async input => {
    // Add a bit more context if the input is very short, to help the model.
    let processedTaskText = input.taskText;
    if (input.taskText.length < 20) {
      processedTaskText = `The task is: "${input.taskText}". Please summarize this brief task. If it's too brief, indicate that.`;
    }

    const response = await taskSummarizationPrompt({ taskText: processedTaskText });
    
    if (!response.output) {
      // This case should ideally be handled by the prompt guiding the LLM to return a specific string for unsummarizable content.
      // However, if the output structure is missing entirely, we provide a default error.
      return { summary: "Error: AI did not return a valid summary structure." };
    }
    return response.output;
  }
);

